<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>https://songjin1994.github.io/2016/12/08/Extjs%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="Extjs框架知识总结"><a href="#Extjs框架知识总结" class="headerlink" title="Extjs框架知识总结"></a>Extjs框架知识总结</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Ext是基于Web的富客户端框架，其完全是基于标准W3C技术构建的，使用到的都是HTML、CSS、DIV等相关技术。Extjs提供了大量已经封装好的可以直接使用的组件，上手容易。以下是基于Extjs框架整合的demo。</p>
<p>Extjs框架可分为五个部分：</p>
<ol>
<li>HTML页面：加载js插件，承载界面显示</li>
<li>Controller.js：控制各个组件，以及实现事件监听</li>
<li>View.js：实现页面的布局</li>
<li>Store.js：提供数据信息，可以通过代理向后台获取表单数据</li>
<li>Model.js：数据保存模块，用于保存Store获取的数据</li>
</ol>
<p>以下是各个模块实现是代码示例：<br>HTML页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</div><div class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</div><div class="line">    &lt;title&gt;Extjs示例&lt;/title&gt;</div><div class="line">    &lt;link href=&quot;ext-4.2/resources/css/ext-all-gray.css&quot; rel=&quot;stylesheet&quot;/&gt;</div><div class="line">    &lt;link href=&quot;resources/css/icon.css&quot; rel=&quot;stylesheet&quot;/&gt;</div><div class="line">    &lt;script src=&quot;ext-4.2/ext-all.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;ext-4.2/locale/ext-lang-zh_CN.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;common.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">        .photo_css1 &#123;</div><div class="line">            height: 18px;</div><div class="line">            width: 66px;</div><div class="line">            cursor: pointer;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .photo_css2 &#123;</div><div class="line">            display: none;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    Ext.application(&#123;</div><div class="line">        name: &apos;Cnu&apos;,</div><div class="line">        controllers: [&apos;Cnu.controller.CheckSummaryController&apos;],</div><div class="line">        launch: function () &#123;</div><div class="line">            Ext.create(&apos;Ext.container.Viewport&apos;, &#123;</div><div class="line">                layout: &apos;fit&apos;,</div><div class="line">                items: [&#123;</div><div class="line">                    xtype: &apos;CheckSummaryView&apos;</div><div class="line">                &#125;]</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>Controller.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Ext.define(&quot;Cnu.controller.CheckSummaryController&quot;, &#123;</div><div class="line">    extend: &apos;Ext.app.Controller&apos;,</div><div class="line">    views: [&apos;demo.CheckSummaryView&apos;],</div><div class="line">    models: [&apos;demo.CheckSummaryModel&apos;],</div><div class="line">    stores: [&apos;demo.CheckSummaryStore&apos;],</div><div class="line">    refs: [</div><div class="line">        &#123;</div><div class="line">            ref: &apos;CheckSummaryView&apos;,</div><div class="line">            selector: &apos;CheckSummaryView&apos;</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    init: function () &#123;</div><div class="line">        this.control(&#123;</div><div class="line">            &apos;CheckSummaryView button&apos;: &#123;</div><div class="line">                click: this.btnEvent</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    ,</div><div class="line">    btnEvent: function (selModel) &#123;</div><div class="line">        var grid = this.getCheckSummaryView();</div><div class="line">        </div><div class="line">        //var model = grid.getSelectionModel();</div><div class="line">        if (selModel.iconCls == &quot;icon-query&quot;) &#123;//查询</div><div class="line">            //点击搜索按钮将查询条件传递到后台</div><div class="line">//        	model.clearSelections();//清空所有选择 </div><div class="line">            var jobId = Ext.getCmp(&apos;jobId&apos;).getValue();</div><div class="line">            var startTime = Ext.util.Format.date(Ext.getCmp(&apos;startTime&apos;).getValue(), &apos;Y-m-d&apos;);</div><div class="line">            var endTime = Ext.util.Format.date(Ext.getCmp(&apos;endTime&apos;).getValue(), &apos;Y-m-d&apos;);</div><div class="line">            var deptType = Ext.getCmp(&apos;deptType&apos;).getValue();</div><div class="line">            //store 加载之前将参数放进去以待后台获取</div><div class="line">            grid.store.on(&apos;beforeload&apos;, function (store, options) &#123;</div><div class="line">                var new_params = &#123;jobId: jobId, startTime: startTime, endTime: endTime,deptType: deptType&#125;;</div><div class="line">                Ext.apply(store.proxy.extraParams, new_params);</div><div class="line">            &#125;);</div><div class="line">            grid.store.load();</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>View.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line">Ext.define(&quot;Cnu.view.demo.CheckSummaryView&quot;, &#123;</div><div class="line">    extend: &apos;Ext.grid.Panel&apos;,</div><div class="line">    xtype: &apos;CheckSummaryView&apos;,</div><div class="line">    store: &apos;demo.CheckSummaryStore&apos;,</div><div class="line">    initComponent: function () &#123;</div><div class="line">        //顶部工具栏 查询输入框</div><div class="line">        this.tbar = [</div><div class="line">            &#123;</div><div class="line">                xtype: &apos;label&apos;, text: &apos;工号：&apos;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                xtype: &apos;textfield&apos;, id: &apos;jobId&apos;,  emptyText: &apos;请输入工号&apos;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                id:&apos;startTime&apos;,</div><div class="line">                xtype : &apos;datefield&apos;,</div><div class="line">                //anchor: &apos;100%&apos;,</div><div class="line">                name : &apos;startTime&apos;,</div><div class="line">                //hiddenName : &apos;bdate&apos;,</div><div class="line">                fieldLabel : &apos;起始时间:&apos;,</div><div class="line">                format: &apos;Y-m-d&apos;,</div><div class="line">                allowBlank  : false,</div><div class="line">                listeners: &#123;</div><div class="line">                    change: function () &#123;</div><div class="line">                    	var e = Ext.util.Format.date(Ext.getCmp(&apos;endTime&apos;).getValue(), &apos;Y-m-d&apos;);//格式化日期控件值</div><div class="line">                        var s = Ext.util.Format.date(Ext.getCmp(&apos;startTime&apos;).getValue(), &apos;Y-m-d&apos;);//格式化日期控件值</div><div class="line">                        var end = new Date(e);</div><div class="line">                        var start = new Date(s);</div><div class="line">                        var today = new Date();</div><div class="line">                        if(start.getTime()&gt;today.getTime())&#123;</div><div class="line">                        	Ext.Msg.alert(&quot;提示：&quot;,&quot;不可大于当前时间！&quot;);</div><div class="line">                        	Ext.getCmp(&apos;startTime&apos;).setValue(null);</div><div class="line">                        &#125;else if(end.getTime() &lt; start.getTime()) &#123;</div><div class="line">                            Ext.Msg.alert(&quot;提示&quot;,&quot;结束时间必须大于开始时间！&quot;);</div><div class="line">                            Ext.getCmp(&apos;startTime&apos;).setValue(null);</div><div class="line">                        &#125;else if((today.getTime()-start.getTime())/86400000&gt;31)&#123;</div><div class="line">                        	Ext.Msg.alert(&quot;提示：&quot;,&quot;只能查询最近30天的数据！&quot;);</div><div class="line">                        	Ext.getCmp(&apos;startTime&apos;).setValue(null);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                value: new Date()  // defaults to today</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            //&#123;xtype:&apos;spacer&apos;, width:100&#125;,</div><div class="line">          </div><div class="line">           &#123;</div><div class="line">                id:&apos;endTime&apos;,</div><div class="line">                xtype : &apos;datefield&apos;,</div><div class="line">                //anchor: &apos;100%&apos;,</div><div class="line">                name : &apos;endTime&apos;,</div><div class="line">                fieldLabel : &apos;截止时间:&apos;,</div><div class="line">                format: &apos;Y-m-d&apos;,</div><div class="line">                allowBlank  : false,</div><div class="line">                listeners: &#123;</div><div class="line">                    change: function () &#123;</div><div class="line">                    	</div><div class="line">                        var e = Ext.util.Format.date(Ext.getCmp(&apos;endTime&apos;).getValue(), &apos;Y-m-d&apos;);//格式化日期控件值</div><div class="line">                        var s = Ext.util.Format.date(Ext.getCmp(&apos;startTime&apos;).getValue(), &apos;Y-m-d&apos;);//格式化日期控件值</div><div class="line">                        var end = new Date(e);</div><div class="line">                        var start = new Date(s);</div><div class="line">                        var today = new Date();</div><div class="line">                        if(end.getTime()&gt;today.getTime())&#123;</div><div class="line">                        	Ext.Msg.alert(&quot;提示：&quot;,&quot;不可大于当前时间！&quot;);</div><div class="line">                        	Ext.getCmp(&apos;endTime&apos;).setValue(null);</div><div class="line">                        &#125;else if(end.getTime() &lt; start.getTime()) &#123;</div><div class="line">                            Ext.Msg.alert(&quot;提示&quot;,&quot;结束时间必须大于开始时间！&quot;);</div><div class="line">                            Ext.getCmp(&apos;endTime&apos;).setValue(null);</div><div class="line">                        &#125;else if((today.getTime()-end.getTime())/86400000&gt;31)&#123;</div><div class="line">                        	Ext.Msg.alert(&quot;提示：&quot;,&quot;只能查询最近30天的数据！&quot;);</div><div class="line">                        	Ext.getCmp(&apos;endTime&apos;).setValue(null);</div><div class="line">                        &#125;</div><div class="line">                       </div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                value: new Date()  // defaults to today</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                id:&apos;deptType&apos;,</div><div class="line">                xtype: &apos;combobox&apos;,</div><div class="line">                fieldLabel: &apos;组织结构:&apos;,</div><div class="line">                name: &apos;deptType&apos;,</div><div class="line">                //hiddenName: &apos;STRATEGY_TYPE&apos;,</div><div class="line">                store: Ext.create(&apos;Ext.data.Store&apos;, &#123;</div><div class="line">                    fields: [&apos;DEPARTMENT&apos;, &apos;DEPARTMENT_DESC&apos;],</div><div class="line">                    autoLoad:true,</div><div class="line">                    proxy: &#123;</div><div class="line">                        type: &apos;rest&apos;,</div><div class="line">                        url: rest_prefix+&apos;/checksummary/getDept&apos;,</div><div class="line">                        reader: &#123;</div><div class="line">                            type: &apos;json&apos;,</div><div class="line">                            root: &apos;DATA&apos;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;),</div><div class="line">                valueField: &apos;DEPARTMENT&apos;,</div><div class="line">                displayField: &apos;DEPARTMENT_DESC&apos;,</div><div class="line">                typeAhead: true,</div><div class="line">                queryMode: &apos;local&apos;,</div><div class="line">                editable:false,</div><div class="line">                allowBlank : false,</div><div class="line">                triggerAction: &apos;all&apos;,</div><div class="line">                emptyText: &apos;请选择组织结构...&apos;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                text: &apos;查询&apos;,</div><div class="line">                iconCls: &apos;icon-query&apos;</div><div class="line">            &#125;</div><div class="line">        ];</div><div class="line">        this.columns = [</div><div class="line">            &#123;</div><div class="line">                header: &apos;工号&apos;,</div><div class="line">                dataIndex: &apos;LOGIN_ID&apos;,</div><div class="line">                flex: 1</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                header: &apos;姓名&apos;,</div><div class="line">                dataIndex: &apos;LOGIN_NAME&apos;,</div><div class="line">                flex: 1.2</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                header: &apos;签入已签出次数&apos;,</div><div class="line">                dataIndex: &apos;LOGIN_NUM&apos;,</div><div class="line">                flex: 2</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                header: &apos;签入已签出时长（小时）&apos;,</div><div class="line">                dataIndex: &apos;LOGIN_TIME&apos;,</div><div class="line">                flex: 1.1</div><div class="line">            &#125;</div><div class="line">            ];</div><div class="line">        this.callParent(arguments);</div><div class="line">    &#125;,</div><div class="line">    dockedItems: [</div><div class="line">        &#123;</div><div class="line">            xtype: &apos;pagingtoolbar&apos;,</div><div class="line">            store: &apos;demo.CheckSummaryStore&apos;,</div><div class="line">            dock: &apos;bottom&apos;,</div><div class="line">            displayInfo: true</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Store.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Ext.define(&quot;Cnu.store.demo.CheckSummaryStore&quot;, &#123;</div><div class="line">    extend: &apos;Ext.data.Store&apos;,</div><div class="line">    model: &apos;Cnu.model.demo.CheckSummaryModel&apos;,</div><div class="line">    pageSize: &apos;15&apos;,</div><div class="line">    autoSync: true,</div><div class="line">    autoLoad: false,</div><div class="line">    remoteFilter: true,</div><div class="line">    remoteSort: true,</div><div class="line">    proxy: &#123;</div><div class="line">        type: &apos;rest&apos;,</div><div class="line">        url: rest_prefix + &apos;/checksummary/checksummarylist&apos;,</div><div class="line">        //actionMethods: &#123;</div><div class="line">        //    read: &apos;POST&apos;</div><div class="line">        //&#125;,</div><div class="line">        reader: &#123;</div><div class="line">            type: &apos;json&apos;,</div><div class="line">            root: &apos;DATA&apos;,</div><div class="line">            totalProperty: &apos;totalCount&apos;</div><div class="line">        &#125;,</div><div class="line">        writer: &#123;</div><div class="line">            type: &apos;json&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    /*sorters: [&#123;property: &apos;CREATE_TIME&apos;, direction: &apos;DESC&apos;&#125;],*/</div><div class="line">    listeners: &#123;</div><div class="line">        &apos;beforeload&apos;: function (store, op, options) &#123;</div><div class="line">            /*var params = &#123;</div><div class="line">                isUse: 0</div><div class="line">            &#125;;</div><div class="line">            Ext.apply(store.proxy.extraParams, params);*/</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Model.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Ext.define(&apos;Cnu.model.demo.CheckSummaryModel&apos;, &#123;</div><div class="line">    extend: &apos;Ext.data.Model&apos;,</div><div class="line">    fields: [</div><div class="line">        &#123;</div><div class="line">            name: &apos;LOGIN_ID&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">        	name: &apos;LOGIN_NAME&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">        	name: &apos;LOGIN_NUM&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">        	name: &apos;LOGIN_TIME&apos;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    ],</div><div class="line"></div><div class="line">    idProperty: &apos;LOGIN_ID&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>后台代理部分具体实现略</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://songjin1994.github.io/2016/12/08/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="oracle数据库日常使用总结"><a href="#oracle数据库日常使用总结" class="headerlink" title="oracle数据库日常使用总结"></a>oracle数据库日常使用总结</h2><h3 id="decode函数的使用"><a href="#decode函数的使用" class="headerlink" title="decode函数的使用"></a>decode函数的使用</h3><p><strong>使用规则：</strong>decode(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)</p>
<p><strong>方法原理：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">IF 条件=值<span class="number">1</span> <span class="function">THEN</span></div><div class="line">　　　　<span class="title">RETURN</span><span class="params">(翻译值<span class="number">1</span>)</span></div><div class="line">ELSIF 条件=值<span class="number">2</span> <span class="function">THEN</span></div><div class="line">　　　　<span class="title">RETURN</span><span class="params">(翻译值<span class="number">2</span>)</span></div><div class="line">　　　　......</div><div class="line">ELSIF 条件=值<span class="function">n THEN</span></div><div class="line">　　　　<span class="title">RETURN</span><span class="params">(翻译值n)</span></div><div class="line">ELSE</div><div class="line">　　　　<span class="title">RETURN</span><span class="params">(缺省值)</span></div><div class="line">END IF</div></pre></td></tr></table></figure></p>
<p>Decode函数与一系列嵌套的 IF-THEN-ELSE语句相似。但是使用更加便捷简单。开发中主要可用于：</p>
<p><strong>1. 对不同取值的数据进行计数</strong></p>
<p>在统计策略项目的成功和失败情况时，直接使用Count函数无法完成分别统计成功和失败的次数。此时可以使用sum函数和decode函数结合，例如<code>SUM (DECODE(H.SERVICE_STATUS,&#39;1&#39;,1，0)) AS SUCCESS</code>，若H.SERVICE_STATUS为’1’（其中’1’表示成功），则返回数字1，通过sum函数进行求和，即可求得所有SERVICE_STATUS为’1’的次数</p>
<p><strong>2. 将当前值翻译为其他值</strong></p>
<p>由上例已经可以看出，在使用<code>DECODE(H.SERVICE_STATUS,&#39;1&#39;,1，0)</code>时，将字符型的1翻译为了数字1，使其可以进行求和操作</p>
<h3 id="字符串拼接操作"><a href="#字符串拼接操作" class="headerlink" title="字符串拼接操作"></a>字符串拼接操作</h3><h4 id="同一条数据中不同列的字符串之间进行拼接操作"><a href="#同一条数据中不同列的字符串之间进行拼接操作" class="headerlink" title="同一条数据中不同列的字符串之间进行拼接操作"></a>同一条数据中不同列的字符串之间进行拼接操作</h4><p>oracle中可以使用<code>||</code>和<code>CONCAT</code>两种方式进行字符串拼接</p>
<p> <strong>使用<code>||</code>方式：</strong><code>&#39;字符串1&#39; || &#39;字符串2&#39; || &#39;字符串3&#39; || &#39;字符串4&#39;</code></p>
<p><strong><em>注意：这种方式进适用于oracle数据库，在MySQL或其他数据库中不能采用这种方式</em></strong></p>
<p> <strong>使用<code>CONCAT</code>方式：</strong><code>SELECT CONCAT(&#39;字符串1&#39;,&#39;字符串2&#39;) FROM TableName</code></p>
<p><strong><em>注意：CONCAT()在oracle中只能拼接两个字符串，如果需要拼接多个字符串，可采用多个CONCAT()嵌套拼接多个字符串。但在MySQL中，CONCAT()函数是可以同时拼接多个字符串的，用法如下</em></strong></p>
<pre><code>`SELECT CONCAT(&apos;字符串1&apos;,&apos;字符串2&apos;,&apos;字符串3&apos;,&apos;字符串4&apos;) FROM TableName`
</code></pre><h4 id="字符串聚合拼接操作"><a href="#字符串聚合拼接操作" class="headerlink" title="字符串聚合拼接操作"></a>字符串聚合拼接操作</h4><p>常用的有</p>
<ol>
<li>WMSYS.WM_CONCAT （从oracle 10G开始支持）</li>
<li>LISTAGG(measure_expr,delimiter) WITHIN GROUP(order_by_clause) OVER(query_partition_clause) （从oracle 11G R2开始支持）</li>
<li>SYS_CONNECT_BY_PATH （从oracle 9i开始支持）<h5 id="WMSYS-WM-CONCAT用法"><a href="#WMSYS-WM-CONCAT用法" class="headerlink" title="WMSYS.WM_CONCAT用法"></a>WMSYS.WM_CONCAT用法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select wmsys.wm_concat(colname1) </div><div class="line">from TableName</div><div class="line">group by colname2;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>默认分隔符为逗号<code>,</code>如果想替换为其他分隔符，可采用如下方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select replace(wmsys.wm_concat(colname1),&apos;,&apos;,&apos;、&apos;) </div><div class="line">from TableName</div><div class="line">group by colname2;</div></pre></td></tr></table></figure></p>
<p>其余两种情况后续补充</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之JDBC]]></title>
      <url>https://songjin1994.github.io/2016/12/07/Spring%E4%B9%8BJDBC/</url>
      <content type="html"><![CDATA[<h1 id="Spring之JDBC"><a href="#Spring之JDBC" class="headerlink" title="Spring之JDBC"></a>Spring之JDBC</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>针对繁琐的JDBC数据库连接配置（需要手动处理大量的异常和打开关闭各种流，例如connection，statement，resultset等）。Spring提供了一组数据访问框架，来消除持久化代码中那些枯燥的数据访问逻辑。Spring集成了多种数据访问技术，可以整合JDBC或者其他ORM框架，此处主要介绍基于JDBC的数据库访问方式。</p>
<p>补充：直接使用原生jdbc方式流程如下（以mysql为例）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/baron"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">"root"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"songjin"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        Statement statement = <span class="keyword">null</span>;</div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">            connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);</div><div class="line">            statement = connection.createStatement();</div><div class="line">            resultSet = statement.executeQuery(<span class="string">"SELECT * FROM filerecord"</span>);</div><div class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</div><div class="line">                System.out.println(<span class="string">"id---&gt;"</span> + resultSet.getInt(<span class="number">1</span>));</div><div class="line">                System.out.println(<span class="string">"md5---&gt;"</span> + resultSet.getString(<span class="number">2</span>));</div><div class="line">                System.out.println(<span class="string">"filename---&gt;"</span> + resultSet.getString(<span class="number">3</span>));</div><div class="line">                System.out.println(<span class="string">"path---&gt;"</span> + resultSet.getString(<span class="number">4</span>));</div><div class="line">                System.out.println(<span class="string">"-----------------------------------------------"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    resultSet.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    statement.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    connection.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关键类库"><a href="#关键类库" class="headerlink" title="关键类库"></a>关键类库</h2><p>使用Spring的JDBC框架，需要导入的包有：</p>
<ol>
<li>JDBC连接的jar包，以mysql为例，导入mysql-connector-java相应的包</li>
<li>导入Spring-JDBC相关的框架包org.springframework.jdbc包</li>
</ol>
<h2 id="简单上手"><a href="#简单上手" class="headerlink" title="简单上手"></a>简单上手</h2><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p>使用Spring的JDBC框架很简单，只需要为其注入一个数据源即可，Spring允许使用JNDI数据源、各种数据源连接池（例如dbcp、c3p0、BoneCP等）以及基于JDBC驱动的数据源。</p>
<p>以dbcp2数据连接池为例，简单配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp2.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span></span></div><div class="line">      <span class="attr">p:driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></div><div class="line">      <span class="attr">p:url</span>=<span class="string">"jdbc:mysql://localhost:3306/baron"</span></div><div class="line">      <span class="attr">p:username</span>=<span class="string">"root"</span></div><div class="line">      <span class="attr">p:password</span>=<span class="string">"password"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="配置JDBC模板"><a href="#配置JDBC模板" class="headerlink" title="配置JDBC模板"></a>配置JDBC模板</h3><p>Spring提供了三个JDBC模板：</p>
<ol>
<li>JdbcTemplate：最基本的SpringJDBC模板，支持简单的JDBC数据库访问功能以及基于索引参数的查询</li>
<li>NamedParameterJdbcTemplate：使用此模板执行查询时可以将值以命名参数的形式绑定到SQL中，而不是使用简单的索引参数</li>
<li>SimpleJdbcTemplate：该模板利用Java5的一些新特性例如自动装箱、泛型、以及可变参数列表来简化JDBC模板的使用（这种模板已经废弃，其特性全部转移到了JdbcTemplate中）</li>
</ol>
<p>接下来把dataSource注入到模板中，配置如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span> </span></div><div class="line">      <span class="attr">c:dataSource-ref</span>=<span class="string">"dataSource"</span>/&gt;</div></pre></td></tr></table></figure>
<p>通过构造器注入到JdbcTemplate中。</p>
<h3 id="使用JdbcTemplate查询数据"><a href="#使用JdbcTemplate查询数据" class="headerlink" title="使用JdbcTemplate查询数据"></a>使用JdbcTemplate查询数据</h3><p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> model.FileRecord;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:conf/beans.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJdbc</span> </span>&#123;</div><div class="line">    Log log = LogFactory.getLog(SpringJdbc.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jdbcTemplate;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectTest</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//查询一行数据</span></div><div class="line">        FileRecord fileRecord = jdbcTemplate.queryForObject(<span class="string">"select * from filerecord where id = ?"</span>,(rs,rouNum) -&gt; <span class="keyword">new</span> FileRecord(rs.getLong(<span class="number">1</span>),rs.getString(<span class="number">2</span>),rs.getString(<span class="number">3</span>),rs.getString(<span class="number">4</span>)),<span class="number">7</span>);</div><div class="line">        log.debug(fileRecord);</div><div class="line">        <span class="comment">//查询多组数据，每一组数据为一个</span></div><div class="line">        List&lt;Map&lt;String,Object&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">"SELECT * FROM filerecord"</span>);</div><div class="line">        list.forEach(x -&gt; System.out.println(x));</div><div class="line">        <span class="comment">//查询多组数据，但每组只有一列数据</span></div><div class="line">        List&lt;String&gt; list1 = jdbcTemplate.queryForList(<span class="string">"SELECT filename FROM filerecord"</span>,String.class);</div><div class="line">        list1.forEach(x -&gt; System.out.println(x));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="queryForObject"><a href="#queryForObject" class="headerlink" title="queryForObject"></a>queryForObject</h4><p>方法其中核心的地方在于lambda表达式的地方</p>
<p><code>(rs,rouNum) -&gt; new FileRecord(rs.getLong(1),rs.getString(2),rs.getString(3),rs.getString(4)),7)</code></p>
<p>在这里实际上是实现了一个RowMapper<t>接口，如下所示：</t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.jdbc.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RowMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">mapRow</span><span class="params">(ResultSet var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于该接口满足函数式接口的特性，只有一个抽象方法，所以可以使用lambda表达式进行简写，通过实现mapRow（）方法，将获得的ResultSet中的值注入到FileRecord类中。</p>
<h4 id="queryForList"><a href="#queryForList" class="headerlink" title="queryForList"></a>queryForList</h4><p>该方法有许多的重载，主要可以分为两种，</p>
<ol>
<li>获取单列数据（SingleColumn）的List，单列数据需要传入一个class类作为返回的数据类型</li>
<li>获取多列数据返回的是一个<code>List&lt;Map&lt;String,Object&gt;&gt;</code>类型的数据，其中查询数据的每一行对应一个Map，每个Map中的Key对应列名，Value对应其相应的值</li>
</ol>
<h4 id="query"><a href="#query" class="headerlink" title="query"></a>query</h4><p>所有的查询，如上的queryForObject和queryForList，以及例如queryForLong、queryForInt实际上最终都是调用query方法进行查询，具体方法详细可以查看源码或者文档。</p>
<p>以下介绍一种本人常使用的重载方法，用于实现查询多行数据并自动注入到FileRecord中。</p>
<p>该方法的api文档描述如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">query</span><span class="params">(String sql,</span></span></div><div class="line">                         RowMapper&lt;T&gt; rowMapper,</div><div class="line">                         Object... args)</div><div class="line">                  <span class="keyword">throws</span> DataAccessException</div><div class="line">Description copied from interface: JdbcOperations</div><div class="line">Query given SQL to create a prepared statement from SQL and a list of arguments to bind to the query, mapping each row to a Java object via a RowMapper.</div><div class="line">Specified by:</div><div class="line">query in interface JdbcOperations</div><div class="line">Parameters:</div><div class="line">sql - SQL query to execute</div><div class="line">rowMapper - object that will map one object per row</div><div class="line">args - arguments to bind to the <span class="title">query</span> <span class="params">(leaving it to the PreparedStatement to guess the corresponding SQL type)</span>; may also contain SqlParameterValue objects which indicate not only the argument value but also the SQL type and optionally the scale</div><div class="line">Returns:</div><div class="line">the result List, containing mapped objects</div><div class="line">Throws:</div><div class="line">DataAccessException - <span class="keyword">if</span> the query fails</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;FileRecord&gt; list2 = jdbcTemplate.query(<span class="string">"select * from filerecord"</span>,(rs,rouNum) -&gt; <span class="keyword">new</span> FileRecord(rs.getLong(<span class="number">1</span>),rs.getString(<span class="number">2</span>),rs.getString(<span class="number">3</span>),rs.getString(<span class="number">4</span>)));</div><div class="line">list2.forEach(x -&gt; System.out.println(x));</div></pre></td></tr></table></figure>
<p>此处并没有明确声明RowMapper指定泛型的类型，但仍然可以正确返回FileRecord类型的数据，是由于java8 lambda表达式强大的联系上下文推测数据类型的功能。</p>
<p>如果按照传统的写法将相当繁琐，必须先定义一个实现RowMapper的类，然后再对其实例化，<strong>并不推荐此方法</strong>，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oldMethod</span><span class="params">()</span></span>&#123;</div><div class="line">  List&lt;FileRecord&gt; list2 = jdbcTemplate.query(<span class="string">"select * from filerecord"</span>,<span class="keyword">new</span> FilerecordRowMapper());</div><div class="line">  list2.forEach(x -&gt; System.out.println(x));</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilerecordRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">FileRecord</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> FileRecord <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FileRecord(rs.getLong(<span class="number">1</span>),rs.getString(<span class="number">2</span>),rs.getString(<span class="number">3</span>),rs.getString(<span class="number">4</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用JdbcTemplate修改数据"><a href="#使用JdbcTemplate修改数据" class="headerlink" title="使用JdbcTemplate修改数据"></a>使用JdbcTemplate修改数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql,</span></span></div><div class="line">                  Object... args)</div><div class="line">           <span class="keyword">throws</span> DataAccessException</div><div class="line">Description copied from interface: JdbcOperations</div><div class="line">Issue a single SQL update <span class="title">operation</span> <span class="params">(such as an insert, update or delete statement)</span> via a prepared statement, binding the given arguments.</div><div class="line">Specified by:</div><div class="line">update in interface JdbcOperations</div><div class="line">Parameters:</div><div class="line">sql - SQL containing bind parameters</div><div class="line">args - arguments to bind to the <span class="title">query</span> <span class="params">(leaving it to the PreparedStatement to guess the corresponding SQL type)</span>; may also contain SqlParameterValue objects which indicate not only the argument value but also the SQL type and optionally the scale</div><div class="line">Returns:</div><div class="line">the number of rows affected</div><div class="line">Throws:</div><div class="line">DataAccessException - <span class="keyword">if</span> there is any problem issuing the update</div></pre></td></tr></table></figure>
<p>插入、修改、删除均可使用该方法完成，略。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux相关]]></title>
      <url>https://songjin1994.github.io/2016/11/10/Linux%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h1 id="Linux相关"><a href="#Linux相关" class="headerlink" title="Linux相关"></a>Linux相关</h1><h2 id="配置163软件源"><a href="#配置163软件源" class="headerlink" title="配置163软件源"></a>配置163软件源</h2><p>修改/etc/apt/sources.list文件内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.163.com/debian/ jessie main non-free contrib</div><div class="line">deb http://mirrors.163.com/debian/ jessie-updates main non-free contrib</div><div class="line">deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib</div><div class="line">deb-src http://mirrors.163.com/debian/ jessie main non-free contrib</div><div class="line">deb-src http://mirrors.163.com/debian/ jessie-updates main non-free contrib</div><div class="line">deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib</div><div class="line">deb http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</div><div class="line">deb-src http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</div></pre></td></tr></table></figure>
<p>然后执行apt update命令即可修改软件源</p>
<h2 id="使用vi编辑器方向键变ABCD且backspace无法使用"><a href="#使用vi编辑器方向键变ABCD且backspace无法使用" class="headerlink" title="使用vi编辑器方向键变ABCD且backspace无法使用"></a>使用vi编辑器方向键变ABCD且backspace无法使用</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb基础知识点总结]]></title>
      <url>https://songjin1994.github.io/2016/11/07/JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="JavaWeb基础知识点总结"><a href="#JavaWeb基础知识点总结" class="headerlink" title="JavaWeb基础知识点总结"></a>JavaWeb基础知识点总结</h1><h2 id="JSP相关"><a href="#JSP相关" class="headerlink" title="JSP相关"></a>JSP相关</h2><h3 id="4种基本语法"><a href="#4种基本语法" class="headerlink" title="4种基本语法"></a>4种基本语法</h3><h4 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h4><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><h4 id="输出JSP表达式"><a href="#输出JSP表达式" class="headerlink" title="输出JSP表达式"></a>输出JSP表达式</h4><h4 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h4><h3 id="三种编译指令"><a href="#三种编译指令" class="headerlink" title="三种编译指令"></a>三种编译指令</h3><h4 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h4><h4 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h4><h4 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h4><h3 id="7个动作指令"><a href="#7个动作指令" class="headerlink" title="7个动作指令"></a>7个动作指令</h3><h4 id="jsp-forward"><a href="#jsp-forward" class="headerlink" title="jsp:forward"></a>jsp:forward</h4><h4 id="jsp-param"><a href="#jsp-param" class="headerlink" title="jsp:param"></a>jsp:param</h4><h4 id="jsp-include"><a href="#jsp-include" class="headerlink" title="jsp:include"></a>jsp:include</h4><h4 id="jsp-plugin"><a href="#jsp-plugin" class="headerlink" title="jsp:plugin"></a>jsp:plugin</h4><h4 id="jsp-useBean"><a href="#jsp-useBean" class="headerlink" title="jsp:useBean"></a>jsp:useBean</h4><h4 id="jsp-setProperty"><a href="#jsp-setProperty" class="headerlink" title="jsp:setProperty"></a>jsp:setProperty</h4><h4 id="jsp-getProprtty"><a href="#jsp-getProprtty" class="headerlink" title="jsp:getProprtty"></a>jsp:getProprtty</h4><h3 id="9个内置对象"><a href="#9个内置对象" class="headerlink" title="9个内置对象"></a>9个内置对象</h3><h4 id="application"><a href="#application" class="headerlink" title="application"></a>application</h4><p>application是<code>javax.servlet.ServletContext</code>的实例，代表jsp所属的Web应用自身，用于jsp或者Servlet之间交换信息</p>
<ol>
<li><p>setAttribute(String attrName,Object value)方法：将一个值设置成application范围的属性，属性值对整个web应用有效</p>
</li>
<li><p>getAttribute(String attrName)方法：通过属性名获取一个application范围的属性值</p>
</li>
<li><p>获取web应用配置参数：使用application的getInitParameter(String paramName)获取web应用的配置参数，这些配置参数应该在web.xml文件中使用context-param元素配置，格式如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>参数名<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>参数值<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>config对象是<code>javax.servlet.ServletConfig</code>的实例，表示当前jsp文件的配置信息，通常jsp无需配置，所以该对象不常使用。但是在Servlet种用处较大，因为Servlet需要在web.xml文件中进行配置，可以用来指定配置参数</p>
<ol>
<li><p>getServletName()返回jsp对用的Servlet的名字，所有jsp的名字都相同，为jsp</p>
</li>
<li><p>getInitParameter(String paramName)方法用于获取jsp的配置参数，jsp参数在web.xml文件中配置格式如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>jsp路径<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>参数名1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>参数值1<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>参数名2<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>参数值2<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h4 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h4><p>exception对象是Throwable的实例，代表jsp脚本中产生的错误和异常，是jsp页面异常机制的一部分，该对象仅在异常处理页面才有效</p>
<h4 id="out"><a href="#out" class="headerlink" title="out"></a>out</h4><p>out对象代表一个页面输出流，通常用于在页面上输出变量值以及常量</p>
<p>使用out的地方，都可以使用表达式<code>&lt;% %&gt;</code>来代替，显得更加简洁，表达式<code>&lt;% %&gt;</code>的本质就是out.write(…)</p>
<h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>代表页面本身</p>
<h4 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h4><p>该对象代表页面上下文，主要用于访问jsp之间的共享数据。使用pageContext可以访问page、request、response、application访问的变量</p>
<h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><h4 id="response"><a href="#response" class="headerlink" title="response"></a>response</h4><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下配置JavaWeb运行环境问题总结]]></title>
      <url>https://songjin1994.github.io/2016/11/01/Linux%E4%B8%8B%E9%85%8D%E7%BD%AEJavaWeb%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="Linux下配置JavaWeb问题总结"><a href="#Linux下配置JavaWeb问题总结" class="headerlink" title="Linux下配置JavaWeb问题总结"></a>Linux下配置JavaWeb问题总结</h1><h2 id="配置Apache-HTTP服务器"><a href="#配置Apache-HTTP服务器" class="headerlink" title="配置Apache HTTP服务器"></a>配置Apache HTTP服务器</h2><h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><p>使用系统：debian8.3</p>
<p>直接使用aptitude命令安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aptitude install apache2</div></pre></td></tr></table></figure>
<p>启动、停止、重启相关命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="配置二级域名"><a href="#配置二级域名" class="headerlink" title="配置二级域名"></a>配置二级域名</h3><p>有时候需要创建二级域名并绑定到新的网站上，此时就需要在云解析上配置二级域名并映射到主机ip地址上，然后通过apache服务器对域名进行解析并转到相应的站点上。</p>
<p>步骤如下</p>
<ol>
<li><p>建立二级域名A记录</p>
<p>你的域名解析服务器上添加一条”*”的A记录，主机记录（即子域名）为子域名称，例如填入abc，则二级域名为abc.主域名.com，并把域名映射到主机上</p>
</li>
<li><p>创建site配置文件</p>
<p>在/etc/apache2/sites-available目录下建一个新的site文件后缀名为.conf才能被apache识别，添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">    ServerAdmin mailName@gmail.com</div><div class="line">    ServerName abc.cqsong.cn    &lt;!-- 填入二级域名 --&gt;</div><div class="line">    DocumentRoot /var/www/html/    &lt;!-- 网站根目录 --&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>激活site文件，使用<code>a2ensite</code>命令激活</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a2ensite abc.conf   //后为文件名</div></pre></td></tr></table></figure>
</li>
<li><p>执行reload操作，使配置文件生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service apache2 reload</div><div class="line">service apache2 restart</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在虚拟机中模拟路由可以使用修改hosts文件来实现域名和主机ip地址映射。</p>
<h3 id="莫名其妙的中文路径乱码问题"><a href="#莫名其妙的中文路径乱码问题" class="headerlink" title="莫名其妙的中文路径乱码问题"></a>莫名其妙的中文路径乱码问题</h3><p>经过排查，是从windows中拷贝到Linux环境时，文件夹名和文件名的编码问题引起的，在windows中，中文默认编码使用的是GBK编码，而在Linux中，使用的是UTF-8编码。所以在文件拷贝之后，实际上在Linux中是乱码的形式，需要对文件夹名和文件名进行转码。使用的方式是convmv命令方式。</p>
<p>通过aptitude命令下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aptitude install convmv</div></pre></td></tr></table></figure>
<p>aptitude使用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convmv -f 源编码 -t 新编码 [选项] 文件名</div></pre></td></tr></table></figure>
<p>常用参数：</p>
<ul>
<li>-r 递归处理子文件夹</li>
<li>–notest 真正进行操作，请注意在默认情况下是不对文件进行真实操作的，而只是试验。</li>
<li>–list 显示所有支持的编码</li>
<li>–unescap 可以做一下转义，比如把%20变成空格</li>
</ul>
<p>修改windows到Linux文件名乱码命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convmv -r  -f gbk -t en_US.utf-8 --notest --nosmart html/</div></pre></td></tr></table></figure>
<h2 id="Tomcat相关"><a href="#Tomcat相关" class="headerlink" title="Tomcat相关"></a>Tomcat相关</h2><h3 id="tomcat启动延迟甚至卡住"><a href="#tomcat启动延迟甚至卡住" class="headerlink" title="tomcat启动延迟甚至卡住"></a>tomcat启动延迟甚至卡住</h3><p> 找到jdk1.x.x_xx/jre/lib/security/<a href="http://lib.csdn.net/base/javaee" target="_blank" rel="external">Java</a>.security文件，在文件中找到securerandom.source这个设置项，将其改为：</p>
<p>securerandom.source=file:/dev/./urandom</p>
<blockquote>
<p>linux或者部分unix系统提供随机数设备是/dev/random 和/dev/urandom ，两个有区别，urandom安全性没有random高，但random需要时间间隔生成随机数。jdk默认调用random。</p>
</blockquote>
<h2 id="Java相关"><a href="#Java相关" class="headerlink" title="Java相关"></a>Java相关</h2><h3 id="Java环境变量的问题"><a href="#Java环境变量的问题" class="headerlink" title="Java环境变量的问题"></a>Java环境变量的问题</h3><p>编辑<code>/etc/profile</code>文件，在最后添加如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> JAVA_HOME=/usr/song/java8</div><div class="line"><span class="keyword">export</span> PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</div><div class="line"><span class="keyword">export</span> CLASSPATH=$CLASSPATH:.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</div></pre></td></tr></table></figure>
<p>保存退出，执行如下命令使环境变量立即生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source  /etc/profile</div></pre></td></tr></table></figure>
<h2 id="Nginx相关"><a href="#Nginx相关" class="headerlink" title="Nginx相关"></a>Nginx相关</h2><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>使用apt-get命令直接安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install nginx</div></pre></td></tr></table></figure>
<h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><p>主配置文件为<code>/etc/nginx/nginx.conf</code>，一般不作修改，对于配置反向代理和配置HTTP服务器只需要编辑<code>/etc/nginx/sites-available/default</code>文件即可，文件详情如下</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment"># You should look at the following URL's in order to grasp a solid understanding</span></div><div class="line"><span class="comment"># of Nginx configuration files in order to fully unleash the power of Nginx.</span></div><div class="line"><span class="comment"># http://wiki.nginx.org/Pitfalls</span></div><div class="line"><span class="comment"># http://wiki.nginx.org/QuickStart</span></div><div class="line"><span class="comment"># http://wiki.nginx.org/Configuration</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Generally, you will want to move this file somewhere, and start with a clean</span></div><div class="line"><span class="comment"># file but keep this around for reference. Or just disable in sites-enabled.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.</span></div><div class="line"><span class="comment">##</span></div><div class="line"></div><div class="line"><span class="comment"># Default server configuration</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span> default_server;</div><div class="line">	<span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</div><div class="line"></div><div class="line">	<span class="comment"># SSL configuration</span></div><div class="line">	<span class="comment">#</span></div><div class="line">	<span class="comment"># listen 443 ssl default_server;</span></div><div class="line">	<span class="comment"># listen [::]:443 ssl default_server;</span></div><div class="line">	<span class="comment">#</span></div><div class="line">	<span class="comment"># Self signed certs generated by the ssl-cert package</span></div><div class="line">	<span class="comment"># Don't use them in a production server!</span></div><div class="line">	<span class="comment">#</span></div><div class="line">	<span class="comment"># include snippets/snakeoil.conf;</span></div><div class="line"></div><div class="line">	<span class="attribute">root</span> /var/www/html;</div><div class="line"></div><div class="line">	<span class="comment"># Add index.php to the list if you are using PHP</span></div><div class="line">	<span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</div><div class="line"></div><div class="line">	<span class="attribute">server_name</span> _;</div><div class="line"></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line"> 		<span class="comment"># First attempt to serve request as file, then</span></div><div class="line">		<span class="comment"># as directory, then fall back to displaying a 404.</span></div><div class="line">		<span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class="line">	<span class="comment">#</span></div><div class="line">	<span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">	<span class="comment">#	include snippets/fastcgi-php.conf;</span></div><div class="line">	<span class="comment">#</span></div><div class="line">	<span class="comment">#	# With php5-cgi alone:</span></div><div class="line">	<span class="comment">#	fastcgi_pass 127.0.0.1:9000;</span></div><div class="line">	<span class="comment">#	# With php5-fpm:</span></div><div class="line">	<span class="comment">#	fastcgi_pass unix:/var/run/php5-fpm.sock;</span></div><div class="line">	<span class="comment">#&#125;</span></div><div class="line"></div><div class="line">	<span class="comment"># deny access to .htaccess files, if Apache's document root</span></div><div class="line">	<span class="comment"># concurs with nginx's one</span></div><div class="line">	<span class="comment">#</span></div><div class="line">	<span class="comment">#location ~ /\.ht &#123;</span></div><div class="line">	<span class="comment">#	deny all;</span></div><div class="line">	<span class="comment">#&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Virtual Host configuration for example.com</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You can move that to a different file under sites-available/ and symlink that</span></div><div class="line"><span class="comment"># to sites-enabled/ to enable it.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#server &#123;</span></div><div class="line"><span class="comment">#	listen 80;</span></div><div class="line"><span class="comment">#	listen [::]:80;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#	server_name example.com;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#	root /var/www/example.com;</span></div><div class="line"><span class="comment">#	index index.html;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#	location / &#123;</span></div><div class="line"><span class="comment">#		try_files $uri $uri/ =404;</span></div><div class="line"><span class="comment">#	&#125;</span></div><div class="line"><span class="comment">#&#125;</span></div><div class="line"><span class="comment"># 配置二级域名，用于博客搭建</span></div><div class="line"><span class="section">server</span></div><div class="line">&#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> blog.cqsongjin.cn;</div><div class="line">	<span class="attribute">index</span> index.jsp index.html;</div><div class="line">	<span class="attribute">root</span> /var/www/html/blog/;</div><div class="line">&#125;</div><div class="line"><span class="comment"># 配置二级域名，并整合tomcat实现反向代理</span></div><div class="line"><span class="section">server</span></div><div class="line">&#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> projects.cqsongjin.cn;</div><div class="line">	<span class="attribute">index</span> index.jsp index.html;</div><div class="line"><span class="attribute">location</span> / &#123;</div><div class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</div><div class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</div><div class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET,POST'</span>;</div><div class="line">	<span class="attribute">index</span> index.jsp;</div><div class="line">	<span class="attribute">proxy_pass</span> http://projects.cqsongjin.cn:8080;</div><div class="line">	<span class="comment"># proxy_set_header  X-Real-IP $remote_addr;</span></div><div class="line">	<span class="comment"># proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Nginx实现动静态资源分离"><a href="#Nginx实现动静态资源分离" class="headerlink" title="Nginx实现动静态资源分离"></a>Nginx实现动静态资源分离</h3><h2 id="Ajax相关"><a href="#Ajax相关" class="headerlink" title="Ajax相关"></a>Ajax相关</h2><h3 id="Ajax跨域请求问题"><a href="#Ajax跨域请求问题" class="headerlink" title="Ajax跨域请求问题"></a>Ajax跨域请求问题</h3><h4 id="添加头文件方式解决"><a href="#添加头文件方式解决" class="headerlink" title="添加头文件方式解决"></a>添加头文件方式解决</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">resp.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</div><div class="line">resp.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span> ,<span class="string">"true"</span>);</div><div class="line">resp.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"GET,POST"</span>);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker简单使用]]></title>
      <url>https://songjin1994.github.io/2016/10/23/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="docker简单使用"><a href="#docker简单使用" class="headerlink" title="docker简单使用"></a>docker简单使用</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><h3 id="apt-get方式安装"><a href="#apt-get方式安装" class="headerlink" title="apt-get方式安装"></a>apt-get方式安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install docker</div></pre></td></tr></table></figure>
<h3 id="rpm方式安装"><a href="#rpm方式安装" class="headerlink" title="rpm方式安装"></a>rpm方式安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install docker-io</div></pre></td></tr></table></figure>
<h3 id="使用Daocloud镜像站安装新版docker"><a href="#使用Daocloud镜像站安装新版docker" class="headerlink" title="使用Daocloud镜像站安装新版docker"></a>使用Daocloud镜像站安装新版docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/docker | sh</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之AOP]]></title>
      <url>https://songjin1994.github.io/2016/10/19/Spring%E4%B9%8BAOP/</url>
      <content type="html"><![CDATA[<h1 id="Spring之AOP"><a href="#Spring之AOP" class="headerlink" title="Spring之AOP"></a>Spring之AOP</h1><h2 id="AOP基础——面向切面编程"><a href="#AOP基础——面向切面编程" class="headerlink" title="AOP基础——面向切面编程"></a>AOP基础——面向切面编程</h2><p>简而言之，AOP面向切面编程的目的就是保证程序员在不修改源代码的情况下，为系统中业务组件的多个业务方法添加某种通过的过程（但其实底层实现仍然是修改了源代码，只是由AOP框架完成，无需手动实现）。</p>
<p>AOP 的实现方法大致分为两类</p>
<ol>
<li>静态AOP代理：在代码编译时期对程序进行修改，实现对目标类的增强，生成静态的AOP代理类。例如AspectJ。</li>
<li>动态AOP代理：AOP框架在运行阶段动态生成AOP代理（有JDK动态代理和cglib动态生成代理两种方式），以实现对目标的增强。例如SpringAOP。</li>
</ol>
<h2 id="AOP的基本概念"><a href="#AOP的基本概念" class="headerlink" title="AOP的基本概念"></a>AOP的基本概念</h2><ul>
<li>切面（Aspect）：切面是通知和切点的集合，通知和切点共同定义了切面的全部内容（在何处何时完成何种功能）</li>
<li>通知（Advice）：切面中所定义的通知定义了切面需要实现的功能以及何时使用该功能。Spring定义了以下5种类型的通知<ul>
<li>前置通知（Before）：在目标方法调用之前执行</li>
<li>后置通知（After）：在目标方法完成之后执行，此时无需关注方法的输出</li>
<li>返回通知（After-returning）：在目标方法成功执行之后执行</li>
<li>异常通知（After-throwing）：在目标方法抛出异常之后执行</li>
<li>环绕通知（Around）：在调用目标方法之前和调用之后执行自定义的行为</li>
</ul>
</li>
<li>连接点（Join Point）：连接点是应用执行过程种能够插入切面的一个点，切面代码可以利用这些点插入到应用的正常流程种，并添加新的行为。这个连接点可以是调用方法时，抛出异常时，甚至修改一个字段时</li>
<li>切点（Pointcut）：切点匹配通知所要织入的一个或多个连接点，Advice定义了何时执行什么方法，切点就定义了何处执行这个方法</li>
<li>引入（Introduction）：引入使得我们可以向现有的类添加新方法和属性</li>
<li>织入（Weaving）：织入是把切面应用到目标对象并创建新的代理对象的过程，在目标对象的生命周期里有多个点可以进行织入<ul>
<li>编译期：切面在目标类编译时被织入，此时需要特殊的编译器。</li>
<li>类加载器：切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器，他可以在目标类在引入应用前增强该目标类的字节码。Aspect5的加载时织入使用的就是这种方式</li>
<li>运行期：切面在运行时的某个时刻被织入。一般情况在，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP使用的就是这种方式进行织入</li>
</ul>
</li>
</ul>
<h2 id="xml配置方式实现SpringAOP"><a href="#xml配置方式实现SpringAOP" class="headerlink" title="xml配置方式实现SpringAOP"></a>xml配置方式实现SpringAOP</h2><p>xml文件配置如下：</p>
<p><code>beans.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">       xmlns:aop="http://www.springframework.org/schema/aop"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans</div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">       http://www.springframework.org/schema/aop</div><div class="line">       http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</div><div class="line">    &lt;context:component-scan base-package="beans,aop"/&gt;</div><div class="line">    &lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;</div><div class="line">    &lt;aop:config&gt;</div><div class="line">        &lt;aop:pointcut id="journalPoint" expression="execution(* beans.teachers.*.*(int,String)) and args(num,str)"/&gt;</div><div class="line">        &lt;aop:aspect id="journalAspect" ref="teacherJournal"&gt;</div><div class="line">            &lt;aop:before method="afterRun" pointcut-ref="journalPoint" arg-names="num,str"/&gt;</div><div class="line">        &lt;/aop:aspect&gt;</div><div class="line">    &lt;/aop:config&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p><code>TeacherJournal.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> aop;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherJournal</span> </span>&#123;</div><div class="line">    <span class="comment">/*@After("execution(* beans.teachers.*.*(int,String)) &amp;&amp; args(num,str)")*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRun</span><span class="params">(<span class="keyword">int</span> num,String str)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"after run!"</span>);</div><div class="line">        System.out.println(<span class="string">"num:"</span>+num+<span class="string">"string:"</span>+str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单的切面配置如上，测试类省略</p>
<h2 id="注解配置方式实现SpringAOP"><a href="#注解配置方式实现SpringAOP" class="headerlink" title="注解配置方式实现SpringAOP"></a>注解配置方式实现SpringAOP</h2><p><code>beans.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">       xmlns:aop="http://www.springframework.org/schema/aop"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans</div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">       http://www.springframework.org/schema/aop</div><div class="line">       http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</div><div class="line">    &lt;context:component-scan base-package="beans,aop"/&gt;</div><div class="line">    &lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p><code>TeacherJournal.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> aop;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherJournal</span> </span>&#123;</div><div class="line">    <span class="meta">@After</span>(<span class="string">"execution(* beans.teachers.*.*(int,String)) &amp;&amp; args(num,str)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRun</span><span class="params">(<span class="keyword">int</span> num,String str)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"after run!"</span>);</div><div class="line">        System.out.println(<span class="string">"num:"</span>+num+<span class="string">"string:"</span>+str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注解方式无需在配置文件中配置大量复杂的属性，只需要通过简单的注解即可实现AOP</p>
<p>需要注意的是使用<code>@Aspect</code>和<code>@After</code>注解需要aspectjrt，aspectjweaver两个jar包的支持，因为Spring是借鉴了AspectJ的注解方法，但实现使用的依然是SpringAOP的实现方式</p>
<h2 id="处理通知中的参数"><a href="#处理通知中的参数" class="headerlink" title="处理通知中的参数"></a>处理通知中的参数</h2><p>在以上两中配置方式的实例中，已经实现了通知参数的传递</p>
<ul>
<li>在使用注解方式中，只需要在接收的方法中定义接收参数的类型，然后在表达式后加上<code>&amp;&amp;args(参数名)</code>的形式即可，参数名不需要非要和切点方法中的参数名保持一致</li>
<li>在使用xml配置方式中，实现的方法和注解方式基本一样，只是由于&amp;在xml中有其他含义，所以将<code>&amp;&amp;</code>替换为<code>and</code>语句即可</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之IOC]]></title>
      <url>https://songjin1994.github.io/2016/10/16/Spring%E4%B9%8BIOC/</url>
      <content type="html"><![CDATA[<h1 id="Spring之IOC"><a href="#Spring之IOC" class="headerlink" title="Spring之IOC"></a>Spring之IOC</h1><h2 id="使用JavaConfic方式进行配置"><a href="#使用JavaConfic方式进行配置" class="headerlink" title="使用JavaConfic方式进行配置"></a>使用JavaConfic方式进行配置</h2><p>Spring3.0之后的版本提供了一种通过java代码进行配置管理bean的新方法，简单例子如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> conf;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"beans"</span>,<span class="string">"aop"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只需要通过一个<code>@Configuration</code>注解即可将一个普通的java类变成一个Spring配置类，<code>@ComponentScan</code>用于查找指定包下（包括子包）的所有使用注解注册的bean。</p>
<p>通常在一个javaConfic中，还有如下常用的注解：</p>
<ol>
<li>@Bean：用于修饰一个方法，将该方法的返回值注册为容器中的一个bean。bean的名称默认为方法名，也可以在注解中进行指定，例如<code>@Bean(name = &quot;beanname&quot;)</code></li>
<li>@Value：用于修饰一个Filed，并为该Filed配置一个值，例如<code>@Value(&quot;fileValue&quot;) String fileValue</code></li>
<li>@Import：修饰一个java配置类，用于向当前配置类中导入其他java配置类</li>
<li>@ImportResource：修饰一个java配置类，作用与上一个注解相似，但不是导入java配置类，而是导入xml配置文件</li>
<li>@Scope：修饰一个方法，指定该方法对应bean的生命域</li>
<li>@Lazy：用于修饰一个方法，指定该方法对应的bean是否需要延迟初始化，缺省值为true 使用如下<code>@Lazy(false)</code></li>
<li>@dependsOn：修饰一个方法，指定在初始化该方法对应bean之前先初始化指定的bean</li>
</ol>
<h2 id="使用xml方式进行配置"><a href="#使用xml方式进行配置" class="headerlink" title="使用xml方式进行配置"></a>使用xml方式进行配置</h2><p>使用xml方式配置管理bean有利于解耦，便于后期无法直接对源码直接进行修改时能够修改相关的配置</p>
<p>大致配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"beans"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>个人比较懒，喜欢通过注解的方式配置bean，所以配置文件看起来就比较简洁，仅仅配置了一个bean扫描组件，作用与上文的<code>@ComponentScan</code>的作用一致</p>
<h2 id="实现bean的自动装配"><a href="#实现bean的自动装配" class="headerlink" title="实现bean的自动装配"></a>实现bean的自动装配</h2><p>bean的自动装配可以在xml配置文件中进行配置，但是非常不灵活，个人更倾向于使用注解的配置方式进行自动地装配，具体方式如下</p>
<h3 id="Resource注解方式（个人推荐）"><a href="#Resource注解方式（个人推荐）" class="headerlink" title="@Resource注解方式（个人推荐）"></a>@Resource注解方式（个人推荐）</h3><p>@Resource注解位于<code>javax.annotation</code>包下，是java EE的一个规范Annotation，所以我更倾向使用@Resource注解，适用范围更广泛，而且使用也比较简单，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span>(name = <span class="string">"liStudent"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStu1</span><span class="params">(Student stu1)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.stu1 = stu1;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>@Resource注解可以设置一个name属性，用于指定所需注入bean的名字，也可以不设置，则默认注入set方法所对应的属性名相同的bean</p>
<p>@Resource不仅可以修饰setter方法，也可以直接修饰实例变量（使用java EE规范的Filed注入，不需要setter方法，也就是实现不需要反射机制）</p>
<h3 id="Autowired注解方式（Spring提供）"><a href="#Autowired注解方式（Spring提供）" class="headerlink" title="@Autowired注解方式（Spring提供）"></a>@Autowired注解方式（Spring提供）</h3><p>@Autowired可以修饰setter方法，普通方法，实例变量和构造器等</p>
<p>@Autowired默认采用byType自动装配策略，根据参数类型进行注入，如果恰好找到一个类型相同的bean，就直接注入，如果找到过个bean，则会报错，如果一个都没有找到，就什么都不执行，也不会报错<code>org.springframework.beans.factory.NoUniqueBeanDefinitionException</code></p>
<p>有时候通过类型进行装配可能引发异常，则可以使用注解@Qualifier实现精准的自动装配实例如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"liStudent"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStu1</span><span class="params">(Student stu1)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.stu1 = stu1;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>当然，Spring也可以使用<code>@Qualifier</code>标注方法的形参进行装配</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStu1</span><span class="params">(@Qualifier(<span class="string">"liStudent"</span>)</span> Student stu1) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.stu1 = stu1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Inject注解方式（JSR-330标准）"><a href="#Inject注解方式（JSR-330标准）" class="headerlink" title="@Inject注解方式（JSR-330标准）"></a>@Inject注解方式（JSR-330标准）</h3><p>与<code>@Autowired</code>注解类似，默认采用byType方式进行注入，示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="meta">@Named</span>(<span class="string">"liStudent"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStu1</span><span class="params">(Student stu1)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.stu1 = stu1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://songjin1994.github.io/2016/10/12/python%E5%9F%BA%E7%A1%80/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一个python程序]]></title>
      <url>https://songjin1994.github.io/2016/10/12/FirstPython/</url>
      <content type="html"><![CDATA[<h1 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>安装python相关环境</p>
<h2 id="从命令行进入python交互模式"><a href="#从命令行进入python交互模式" class="headerlink" title="从命令行进入python交互模式"></a>从命令行进入python交互模式</h2><p>在命令行下，执行<code>python</code>进入python交互模式</p>
<h2 id="执行python语句"><a href="#执行python语句" class="headerlink" title="执行python语句"></a>执行python语句</h2><p>在交互环境下，任意输入python语句，例如</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> + <span class="number">1</span></div></pre></td></tr></table></figure>
<p>可立即看到结果<code>2</code></p>
<h2 id="执行python脚本文件"><a href="#执行python脚本文件" class="headerlink" title="执行python脚本文件"></a>执行python脚本文件</h2><p>可以将python语句写在文本中，后缀名为<code>py</code>，例如新建一个<code>py1.py</code>文件，其内容为</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">1</span> + <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>在命令行执行如下命令（路径切换到其脚本文件所在目录）</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python py1.py</div></pre></td></tr></table></figure>
<p>即可看到命令行打印出结果<code>2</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>执行python代码可以通过输入<code>python</code>语句进入python交互模式直接输入代码执行，也可以通过<code>python [文件名].py</code>语句来执行python程序。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之入门]]></title>
      <url>https://songjin1994.github.io/2016/10/10/Spring%E4%B9%8B%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="Spring之入门"><a href="#Spring之入门" class="headerlink" title="Spring之入门"></a>Spring之入门</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>什么是Spring？简而言之，Spring是一个致力于全方位简化Java开发的轻量级框架，为了降低Java开发的复杂性，Spring主要从以下四个关键方向进行：</p>
<ol>
<li>基于POJO的轻量级和最小侵入式编程</li>
<li>通过依赖注入和面向接口实现松耦合</li>
<li>基于切面和惯例进行声明式编程</li>
<li>通过切面和模板减少样板代码</li>
</ol>
<p>Spring框架专注于通过依赖注入（DI，dependency injection），面向切面编程（AOP，aspect-oriented programming）和消除样板代码来简化Java开发，以下对这几种特性作简要总结，后续会详细进行讲解。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h3><p>一个常用的应用不会只由一个类独立完成，往往是由多个类来共同完成的。每个对象负责管理与自己相互协作（也就是相互依赖）的对象的引用，这将产生高耦合的代码，在一个庞大的项目中，大量的高耦合代码是不容易进行管理和调试的。</p>
<p>通过DI，对象的依赖关系将由Spring容器在创建对象的时候进行设定。对象无需自行创建或管理他们的依赖关系，将由容器根据预定的配置将所依赖的对象注入到相应的对象中。</p>
<h3 id="面向切面编程（AOP）"><a href="#面向切面编程（AOP）" class="headerlink" title="面向切面编程（AOP）"></a>面向切面编程（AOP）</h3><p>一个系统往往由许多不同功能的组件组成，每个组件除了各自的特定功能之外，还需要一些其他的额外功能，例如日志、事务管理和安全验证等等，这一类系统服务会跨越系统的多个组件中，通常被称为横切关注点。试想一下，如果各自功能组件分别实现自己的日志事务管理等功能，将会导致大量的重复代码，当需求改变时，需要对所有的代码进行修改，工作量也是巨大的。</p>
<p>AOP的功能在于使这一类服务模块化，并已声明的方式将他们应用到需要这些功能的组件中，而这些组件只需要完成自己功能的实现无需关注其他的功能。</p>
<h3 id="Spring容器"><a href="#Spring容器" class="headerlink" title="Spring容器"></a>Spring容器</h3><p>在Spring中，所有的应用对象都在Spring容器中。Spring容器负责创建对象，装配对象，配置对象并管理他们的整个生命周期。Spring容器使Spring框架的核心，它使用DI管理构成应用的组件，创建相互协作的组件之间的关联。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法常见问题总结]]></title>
      <url>https://songjin1994.github.io/2016/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="数据结构与算法常见问题总结"><a href="#数据结构与算法常见问题总结" class="headerlink" title="数据结构与算法常见问题总结"></a>数据结构与算法常见问题总结</h2><h3 id="输入一个整数，返回其反序整数"><a href="#输入一个整数，返回其反序整数" class="headerlink" title="输入一个整数，返回其反序整数"></a>输入一个整数，返回其反序整数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Rev</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        String str = <span class="string">""</span>+n;</div><div class="line">        String tmp = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</div><div class="line">            tmp = tmp + str.charAt(str.length()-i-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Integer.parseInt(tmp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="利用栈实现回文验证，例如验证（）-【】括号使用的合法性"><a href="#利用栈实现回文验证，例如验证（）-【】括号使用的合法性" class="headerlink" title="利用栈实现回文验证，例如验证（）{}【】括号使用的合法性"></a>利用栈实现回文验证，例如验证（）{}【】括号使用的合法性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String args)</span></span>&#123;</div><div class="line">        String str = args;</div><div class="line">        <span class="keyword">char</span> temp = <span class="string">' '</span>;</div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;str.length();i++)&#123;</div><div class="line">            temp = str.charAt(i);</div><div class="line">            <span class="keyword">if</span> (<span class="string">'&#123;'</span> == temp || <span class="string">'['</span> == temp || <span class="string">'('</span> == temp)&#123;</div><div class="line">                stack.push(temp);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'&#125;'</span> == temp &amp;&amp; <span class="string">'&#123;'</span> != stack.pop())&#123;</div><div class="line">                flag = <span class="keyword">false</span>;<span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">']'</span> == temp &amp;&amp; <span class="string">'['</span> != stack.pop())&#123;</div><div class="line">                flag = <span class="keyword">false</span>;<span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">')'</span> == temp &amp;&amp; <span class="string">'('</span> != stack.pop())&#123;</div><div class="line">                flag = <span class="keyword">false</span>;<span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (! stack.empty())&#123;flag = <span class="keyword">false</span>;&#125;</div><div class="line">        <span class="keyword">return</span> flag;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###输出一个集合的所有子集<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childlist</span><span class="params">(<span class="keyword">int</span>[] list)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">1</span> &lt;&lt;list.length;</div><div class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;num-<span class="number">1</span>; i++)&#123;</div><div class="line">            p = i;</div><div class="line">            index = <span class="number">0</span>;</div><div class="line">            System.out.print(<span class="string">"&#123;"</span>);</div><div class="line">            <span class="keyword">while</span> (p &gt; <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">if</span> ((p &amp; <span class="number">1</span>) &gt;<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">if</span> ((p &gt;&gt; <span class="number">1</span>)&gt;<span class="number">0</span>) &#123;</div><div class="line">                        System.out.print(list[index] + <span class="string">","</span>);</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        System.out.print(list[index]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                p &gt;&gt;=<span class="number">1</span>;</div><div class="line">                index++;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"&#125;"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>####使用循环实现二分查找<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">midSearch</span><span class="params">(<span class="keyword">int</span>[] arrays,<span class="keyword">int</span> key)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = arrays.length/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (key == arrays[mid])&#123;<span class="keyword">return</span> mid;&#125;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end = arrays.length-<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (start &lt;= end)&#123;</div><div class="line">        mid = start + (end-start)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (key &lt; arrays[mid])&#123;</div><div class="line">            end = mid-<span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key &gt; arrays[mid])&#123;</div><div class="line">            start = mid+<span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用递归实现二分查找"><a href="#使用递归实现二分查找" class="headerlink" title="使用递归实现二分查找"></a>使用递归实现二分查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">midSearch2</span><span class="params">(<span class="keyword">int</span>[] arrays,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> key)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = start + (end-start)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (key == arrays[mid])&#123;</div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (start &gt;= end)&#123;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arrays[mid])&#123;</div><div class="line">        <span class="keyword">return</span> midSearch2(arrays,start,mid-<span class="number">1</span>,key);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key &gt; arrays[mid])&#123;</div><div class="line">        <span class="keyword">return</span> midSearch2(arrays,mid+<span class="number">1</span>,end,key);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重载方法一，对整个数组进行排序</div><div class="line">     * <span class="doctag">@param</span> arrays</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (arrays == <span class="keyword">null</span> || arrays.length == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        quickSort(arrays,<span class="number">0</span>,arrays.length-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重载方法二，对数组中指定区间进行排序</div><div class="line">     * <span class="doctag">@param</span> arrays</div><div class="line">     * <span class="doctag">@param</span> left</div><div class="line">     * <span class="doctag">@param</span> right</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arrays,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> mid = parttion(arrays,left,right);</div><div class="line">        <span class="keyword">if</span> (left &lt; right)&#123;</div><div class="line">            quickSort(arrays,left,mid-<span class="number">1</span>);</div><div class="line">            quickSort(arrays,mid+<span class="number">1</span>,right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分治算法，返回基准关键值的位置</div><div class="line">     * <span class="doctag">@param</span> arrays</div><div class="line">     * <span class="doctag">@param</span> left</div><div class="line">     * <span class="doctag">@param</span> right</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">parttion</span><span class="params">(<span class="keyword">int</span>[] arrays,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> flag = arrays[left];</div><div class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</div><div class="line">            <span class="keyword">while</span> (arrays[right] &gt;= flag &amp;&amp; left &lt; right)&#123;</div><div class="line">                right--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (left &lt; right)&#123;</div><div class="line">                arrays[left++] = arrays[right];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (arrays[left] &lt;= flag &amp;&amp; left &lt;right)&#123;</div><div class="line">                left++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (left &lt; right)&#123;</div><div class="line">                arrays[right--] = arrays[left];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        arrays[left] = flag;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回一个杨辉三角的二维数组"><a href="#返回一个杨辉三角的二维数组" class="headerlink" title="返回一个杨辉三角的二维数组"></a>返回一个杨辉三角的二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回一个杨辉三角</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] outYang(<span class="keyword">int</span> n)&#123;</div><div class="line">    <span class="keyword">int</span>[][] yang = <span class="keyword">new</span> <span class="keyword">int</span>[n][];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        yang[i] = <span class="keyword">new</span> <span class="keyword">int</span>[i+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;=i;j++)&#123;</div><div class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || j == i)&#123;</div><div class="line">                yang[i][j] = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</div><div class="line">                yang[i][j] = yang[i-<span class="number">1</span>][j-<span class="number">1</span>] + yang[i-<span class="number">1</span>][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> yang;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础知识整理]]></title>
      <url>https://songjin1994.github.io/2016/09/12/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript基础知识整理"><a href="#JavaScript基础知识整理" class="headerlink" title="JavaScript基础知识整理"></a>JavaScript基础知识整理</h1><h2 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h2><ol>
<li>JavaScript对象——无序的集合数据类型，由若干键值对组成。</li>
<li>访问对象内部属性有两种方法，object.prop和obje[‘prop’]，其中后者主要用于属性不是一个有效的变量的情况。</li>
<li>在JavaScript中，访问对象中不存在的属性不会报错，而会返回undefined。</li>
<li>删除属性操作 delete object.prop。</li>
<li>检测某一属性是否存在 prop in object，其中继承所得到的属性也包括在其中。</li>
<li>判断一个属性是否为自身拥有而非继承所得到用hasOwnProperty(),object.hasOwnProperty(‘prop’)。</li>
</ol>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>if{}…else{}<br>注意：满足if条件后，就会执行if内的代码，执行后不会再判断else部分的条件是否满足</p>
<p>##循环</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java算法基础之常用排序算法]]></title>
      <url>https://songjin1994.github.io/2016/08/20/java%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="java算法基础之常用排序算法"><a href="#java算法基础之常用排序算法" class="headerlink" title="java算法基础之常用排序算法"></a>java算法基础之常用排序算法</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><p>冒泡排序算法的基本思路为：依次比较相邻两数，如果两数的顺序错误，就交换两个数的位置，直到比较完所有的数，则排序完成，java实现的代码如下所示：</p>
<pre><code>public static void bubbleSort(int[] array){
        for (int i = array.length-1;i &gt;0;i--){
            for (int j = 0;j &lt; i;j++){
                if (array[j] &gt;array[j+1]){
                    int tmp;
                    tmp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = tmp;
                }
            }
        }
    }
</code></pre><p>算法提示：在交换位置之前加入的布尔类型的变量exchangeflag作为标志位，如果在一轮比较中没有发生交换，则说明排序完成，无需继续进行循环。</p>
<h3 id="时间复杂度问题"><a href="#时间复杂度问题" class="headerlink" title="时间复杂度问题"></a>时间复杂度问题</h3><ol>
<li>冒泡排序算法最好的时间复杂度是O(n)</li>
<li>冒泡排序算法最坏的时间复杂度是O(n^2)</li>
<li>冒泡算法的平均时间复杂度是O(n^2)</li>
</ol>
<h3 id="2-选择排序算法"><a href="#2-选择排序算法" class="headerlink" title="2.选择排序算法"></a>2.选择排序算法</h3><p>选择排序算法的基本思路为：从被排序数组中找出最小的一个数放在数组的第一位，接着从剩下的数中选出最小的放在第二位，如此反复，直到排到第N-1位，排序结束</p>
<p>算法如下：</p>
<pre><code>public static void selectSort(int[] array){
        for (int i = 0;i &lt; array.length-1;i++){
            for (int j = i+1;j &lt; array.length;j++){
                if (array[i] &lt;array[j]){
                    int tmp;
                    tmp = array[i];
                    array[i] = array[j];
                    array[j] = tmp;
                }
            }
        }
    }
</code></pre><h3 id="3-插入排序算法"><a href="#3-插入排序算法" class="headerlink" title="3.插入排序算法"></a>3.插入排序算法</h3><p>插入排序算法的基本思路为：选择第一位数为已排序数，取出下一位未排序的数，从后往前扫描，如果被扫描的数大于该未排序数，则两数交换位置，然后接着扫描，直到找到已排序的数小于或等于该未排序数，则将该新元素插入到这个位置。接着取出下一位未排序数，重复以上操作，知道所有数完成排序。</p>
<p>算法如下：</p>
<pre><code>public static void insertSort(int [] array){
        int temp;
        for (int i =1;i &lt; array.length;i++){
            for (int j = i;j &gt;0;j--){
                if (array[j] &lt; array[j-1]){
                    temp = array[j];
                    array[j] = array[j-1];
                    array[j-1] = temp;
                }else {
                    break;
                }
            }
        }
    }
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hibernate学习相关总结和问题解决]]></title>
      <url>https://songjin1994.github.io/2016/08/07/hibernate%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93%E5%92%8C%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="hibernate学习相关总结和问题解决"><a href="#hibernate学习相关总结和问题解决" class="headerlink" title="hibernate学习相关总结和问题解决"></a>hibernate学习相关总结和问题解决</h2><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="hibernate不自动建表问题"><a href="#hibernate不自动建表问题" class="headerlink" title="hibernate不自动建表问题"></a>hibernate不自动建表问题</h3><p>配置了<code>&lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/property&gt;</code>之后，在数据库中不存在相应的数据表的时候，仍然无法自动创建表，可以查看是否是数据库方言的问题，</p>
<p>出错原因：原代码 <code>&lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLInnoDBDialect&lt;/property&gt;</code>在mysql5.5以上版本，配置方言的时候mysql默认存储引擎为InnoDB，需创建新表（表名不存在），数据库方言只能选择MySQLDialect；</p>
<p>修改方案：修改配置为<code>&lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/property&gt;</code>（推荐）</p>
<p>或者<code>&lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQDialect&lt;/property&gt;</code></p>
<h3 id="配置文件模板记录"><a href="#配置文件模板记录" class="headerlink" title="配置文件模板记录"></a>配置文件模板记录</h3><pre><code>&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;
&lt;!DOCTYPE hibernate-configuration PUBLIC
        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;

&lt;hibernate-configuration&gt;

    &lt;session-factory&gt;

        &lt;!-- Database connection settings --&gt;
        &lt;property name=&quot;connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;
        &lt;property name=&quot;connection.url&quot;&gt;jdbc:mysql://localhost:3306/baron&lt;/property&gt;
        &lt;property name=&quot;connection.username&quot;&gt;root&lt;/property&gt;
        &lt;property name=&quot;connection.password&quot;&gt;songjin&lt;/property&gt;

        &lt;!-- JDBC connection pool (use the built-in) --&gt;
        &lt;property name=&quot;connection.pool_size&quot;&gt;1&lt;/property&gt;

        &lt;!-- SQL dialect --&gt;
        &lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/property&gt;

        &lt;!-- Enable Hibernate&apos;s automatic session context management --&gt;
        &lt;property name=&quot;current_session_context_class&quot;&gt;thread&lt;/property&gt;

        &lt;!-- Disable the second-level cache  --&gt;
        &lt;!-- &lt;property name=&quot;cache.provider_class&quot;&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/property&gt; --&gt;

        &lt;!-- Echo all executed SQL to stdout --&gt;
        &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;

        &lt;!-- Drop and re-create the database schema on startup --&gt;
        &lt;property name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/property&gt;
        &lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt;
        &lt;!-- &lt;mapping resource=&quot;org/hibernate/tutorial/domain/Event.hbm.xml&quot;/&gt; --&gt;
        &lt;mapping resource=&quot;com/song/hb/model/user.hbm.xml&quot;/&gt;
        &lt;mapping class=&quot;com.song.hb.model.Teacher&quot;/&gt;
    &lt;/session-factory&gt;

&lt;/hibernate-configuration&gt;
</code></pre><h3 id="hibernate4获取SessionFactory的方式变化"><a href="#hibernate4获取SessionFactory的方式变化" class="headerlink" title="hibernate4获取SessionFactory的方式变化"></a>hibernate4获取SessionFactory的方式变化</h3><pre><code>Configuration configuration = new Configuration().configure();
StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();
SessionFactory sessionFactory = configuration.buildSessionFactory(serviceRegistry);
</code></pre><h2 id="简单配置上手"><a href="#简单配置上手" class="headerlink" title="简单配置上手"></a>简单配置上手</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp2.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span></span></div><div class="line">      <span class="attr">p:driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></div><div class="line">      <span class="attr">p:url</span>=<span class="string">"jdbc:mysql://localhost:3306/baron"</span></div><div class="line">      <span class="attr">p:username</span>=<span class="string">"root"</span></div><div class="line">      <span class="attr">p:password</span>=<span class="string">"songjin"</span></div><div class="line">      /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span></span></div><div class="line">      <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span></div><div class="line">      <span class="attr">p:packagesToScan</span>=<span class="string">"model"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">      hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</div><div class="line">      hibernate.show_sql=true</div><div class="line">      hbm2ddl.auto=update</div><div class="line">      hibernate.format_sql=true</div><div class="line">      hibernate.connection.autocommit=true</div><div class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span></span></div><div class="line">      <span class="attr">p:sessionFactory-ref</span>=<span class="string">"sessionFactory"</span>/&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span> <span class="attr">c:dataSource-ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="与Spring整合相关问题"><a href="#与Spring整合相关问题" class="headerlink" title="与Spring整合相关问题"></a>与Spring整合相关问题</h2><h3 id="简单整合"><a href="#简单整合" class="headerlink" title="简单整合"></a>简单整合</h3><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="事务管理在测试方法中自动回滚"><a href="#事务管理在测试方法中自动回滚" class="headerlink" title="事务管理在测试方法中自动回滚"></a>事务管理在测试方法中自动回滚</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之MVC]]></title>
      <url>https://songjin1994.github.io/2016/06/25/Spring%E4%B9%8BMVC/</url>
      <content type="html"><![CDATA[<h1 id="Spring之MVC"><a href="#Spring之MVC" class="headerlink" title="Spring之MVC"></a>Spring之MVC</h1><p>前言：近期从学习s2sh框架转到SpringMVC，写下此随笔记录学习中的问题和总结，方便日后进行查阅</p>
<h2 id="SpringMVC框架特点"><a href="#SpringMVC框架特点" class="headerlink" title="SpringMVC框架特点"></a>SpringMVC框架特点</h2><p>相比较Struts2来说，SpringMVC是一个轻量级的MVC框架。之所以说轻量级，是因为Struts2是基于类级别的拦截，针对每一个请求，都需要一个对应的Action来进行处理，而SpringMVC是基于方法级别的拦截，开发效率和执行效率要高于Struts2.</p>
<p>SpringMVC的核心是一个DispatcherServlet类。与大多数javaWeb框架一样，SpringMVC所有的请求都会通过一个前端控制器Servlet，也就是DispatcherServlet</p>
<p>DispatcherServlet的任务就是将请求发送给SpringMVC控制器，即一个Controller。控制器是一个用于处理请求的Spring组件。</p>
<p>通过以上内容，对SpringMVC有了一个大概的了解，接下里将进行一个简单的SpringMVC框架的配置。</p>
<h2 id="配置SpringMVC"><a href="#配置SpringMVC" class="headerlink" title="配置SpringMVC"></a>配置SpringMVC</h2><p>补充：Servlet3.0新特性：</p>
<ol>
<li>异步处理支持：有了该特性，Servlet 线程不再需要一直阻塞，直到业务处理完毕才能再输出响应，最后才结束该 Servlet 线程。在接收到请求之后，Servlet 线程可以将耗时的操作委派给另一个线程来完成，自己在不生成响应的情况下返回至容器。针对业务处理较耗时的情况，这将大大减少服务器资源的占用，并且提高并发处理速度。</li>
<li>新增的注解支持：该版本新增了若干注解，用于简化 Servlet、过滤器（Filter）和监听器（Listener）的声明，这使得 web.xml 部署描述文件从该版本开始不再是必选的了。</li>
<li>可插性支持：熟悉 Struts2 的开发者一定会对其通过插件的方式与包括 Spring 在内的各种常用框架的整合特性记忆犹新。将相应的插件封装成 JAR 包并放在类路径下，Struts2 运行时便能自动加载这些插件。现在 Servlet 3.0 提供了类似的特性，开发者可以通过插件的方式很方便的扩充已有 Web 应用的功能，而不需要修改原有的应用。</li>
</ol>
<p>传统的Servlet配置方式是采用web.xml文件进行配置。但是在Servlet3的新规范中，并不推荐这种配置方式，而通过spring3.1之后的功能增强和Servlet3的新规范，可以使用一种更便捷的新方法，通过java类的方式来配置DispatcherServlet</p>
<h3 id="使用JavaConfig方式配置"><a href="#使用JavaConfig方式配置" class="headerlink" title="使用JavaConfig方式配置"></a>使用JavaConfig方式配置</h3><p>首先，需要新建一个类，继承AbstractAnnotationConfigDispatcherServletInitializer类，我将这个类命名为MyWebAppInitializer</p>
<p>MyWebAppInitializer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.song.web.config;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.MultipartConfigElement;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123;RootConfig.class&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123;WebConfig.class&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;<span class="string">"/"</span>&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 可用此方法配置Filter</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[] &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 上传文件参数配置</div><div class="line">     * <span class="doctag">@param</span> registration</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> </span>&#123;</div><div class="line">        registration.setMultipartConfig(</div><div class="line">                <span class="keyword">new</span> MultipartConfigElement(<span class="string">"d:/tmp/"</span>,<span class="number">419430400</span>,<span class="number">419430400</span>,<span class="number">0</span>)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面对这个类进行说明，为什么要创建一个这样的类？在Servlet3.0的环境中，容器会在类路径中查找实现了javax.servlet.ServletContainerInitializer接口的类，如果找到了这个类，就用它来配置Servlet容器。幸运的是，Spring已经提供了这个接口的实现，那就是SpringServletContainerInitializer这个类，这个类又会反过来查找实现了WebApplicationInitializer接口的类，并将非陪的任务交给他们完成。Spring3.2之后提供了一个便利的实现，那就是AbstractAnnotationConfigDispatcherServletInitializer这个类，由于MyWebAppInitializer继承了这个类，也就同时实现了WebApplicationInitializer这个接口，所以当部署到Servlet3.0容器中的时候，容器就会自动发现它，并用来配置Servlet上下文。通过其中的方法，即可完成对DispatcherServlet的配置</p>
<p>下面对类中的方法进行说明</p>
<p>getRootConfigClasses()：返回一个Spring配置类数组，用来配置其他工具bean类，例如DataSource，Mybatis，Service类等等。</p>
<p>getServletConfigClasses()：返回一个springMVC配置类数组，用来配置与web相关的bean类，例如controller类等等。</p>
<p>AbstractAnnotationConfigDispatcherServletInitializer在初始化的时候，会自动帮我们注册DispatcherServlet类，并根据getServletConfigClasses（）提供的配置类创建servletContext，但在SpringWeb应用中，一般还会有另一个ApplicationContext，是由ContextLoaderListener创建的，其中ApplicationContext是ServletContext的父容器，也就是说ServletContext可以访问ApplicationContext中声明的bean。</p>
<p>除了以上简单配置外，另外springMVC所需要的各种过滤器并没有在其中进行配置，感觉这样配置的话会显得很杂乱，所以我个人是将这些过滤器在wwb.xml中进行配置，如编码过滤器配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中RootConfig.java代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.song.web.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 声明为配置类，用于配置Spring容器</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 导入其他配置文件，当只能通过mxl配置某些组件的时候可以考虑这种方式，此处用于引入Spring组件的相关配置</div><div class="line"> */</div><div class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:xml/spring-mybatis.xml"</span>)</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 配置组件扫描，自动扫描相关包下使用<span class="doctag">@Component</span>、<span class="doctag">@Controller</span>、<span class="doctag">@Service</span>等注解的类，将其配置为bean组件</div><div class="line"> */</div><div class="line"><span class="meta">@ComponentScan</span>(basePackages =&#123;<span class="string">"com.song"</span>&#125;,</div><div class="line">        excludeFilters = &#123;<span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION,value = EnableWebMvc.class)&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>WebConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.song.web.config;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.support.StandardServletMultipartResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">/***</span></div><div class="line"> * 启用SpringMvc的支持</div><div class="line"> */</div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.song,web"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册一个简单的视图解析器</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</div><div class="line">        InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</div><div class="line">        resolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</div><div class="line">        resolver.setSuffix(<span class="string">".jsp"</span>);</div><div class="line">        resolver.setExposeContextBeansAsAttributes(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> resolver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用于上传操作的组件</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StandardServletMultipartResolver();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置静态资源的处理，将静态资源的请求转发到Servlet容器中默认的Servlet上</div><div class="line">     * <span class="doctag">@param</span> configurer</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</div><div class="line">        configurer.enable();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上便完成了一个简单的SpringMVC框架配置</p>
<h3 id="使用传统xml方式配置"><a href="#使用传统xml方式配置" class="headerlink" title="使用传统xml方式配置"></a>使用传统xml方式配置</h3><p>web.xml文件如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></div><div class="line">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</div><div class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!--默认的首页--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 如果是用maven命令生成的xml，需要修改servlet版本为3.1 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 配置DispatcherServlet --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 配置根上下文环境--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>CloudDisk<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span>    <span class="comment">&lt;!-- 项目名称 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> <span class="comment">&lt;!-- mvc调度器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置springMVC需要加载的配置文件</span></div><div class="line">        spring-dao.xml.xml,spring-service.xml,spring-web.xml</div><div class="line">        Mybatis - &gt; spring -&gt; springmvc</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/servlet-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">location</span>&gt;</span>d:/tmp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 解决中文乱码问题--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>servlet-mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</div><div class="line">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</div><div class="line">http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd</div><div class="line">http://www.springframework.org/schema/task</div><div class="line">http://www.springframework.org/schema/task/spring-task.xsd</div><div class="line">http://www.springframework.org/schema/mvc</div><div class="line">     http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.song.web"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置静态资源访问--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></div><div class="line">          <span class="attr">p:prefix</span>=<span class="string">"/WEB-INF/views/"</span></div><div class="line">          <span class="attr">p:suffix</span>=<span class="string">".jsp"</span></div><div class="line">          <span class="attr">p:exposeContextBeansAsAttributes</span>=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fmViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"</span></span></div><div class="line">          <span class="attr">p:prefix</span>=<span class="string">"/one/"</span></div><div class="line">          <span class="attr">p:suffix</span>=<span class="string">".ftl"</span></div><div class="line">          <span class="attr">p:contentType</span>=<span class="string">"utf-8"</span></div><div class="line">          <span class="attr">p:order</span>=<span class="string">"0"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fmViewConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span></span></div><div class="line">          <span class="attr">p:templateLoaderPath</span>=<span class="string">"/WEB-INF/fmtemplate/"</span></div><div class="line">          <span class="attr">p:defaultEncoding</span>=<span class="string">"utf-8"</span> &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freemarkerSettings"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"template_update_delay"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"locale"</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"datetime_format"</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"date_format"</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"number_format"</span>&gt;</span>#.##<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.support.StandardServletMultipartResolver"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>spring-root.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.song"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="SpringMVC高级配置"><a href="#SpringMVC高级配置" class="headerlink" title="SpringMVC高级配置"></a>SpringMVC高级配置</h2><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h3 id="跨重定向请求传递数据"><a href="#跨重定向请求传递数据" class="headerlink" title="跨重定向请求传递数据"></a>跨重定向请求传递数据</h3><h2 id="问题总结："><a href="#问题总结：" class="headerlink" title="问题总结："></a>问题总结：</h2><ol>
<li>mybatis设置了主键自增之后为什么仍然报错，显示主键为空？原因是mybatis的主键自增需要是基于数据库的主键自增，所以在数据库里面一定要启动主键的自增选项，这样才会生效。</li>
<li>​</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Struts2配置文件相关标签及其属性]]></title>
      <url>https://songjin1994.github.io/2016/05/10/Struts2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%85%B6%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="Struts2配置文件相关标签及其属性"><a href="#Struts2配置文件相关标签及其属性" class="headerlink" title="Struts2配置文件相关标签及其属性"></a>Struts2配置文件相关标签及其属性<struts></struts></h1><h2 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h2><h2 id="package-用法和java的包类似，用于区分同名的action"><a href="#package-用法和java的包类似，用于区分同名的action" class="headerlink" title="package:用法和java的包类似，用于区分同名的action"></a>package:用法和java的包类似，用于区分同名的action</h2><ol>
<li>name：包名</li>
<li>extends：继承的包名，一般默认为“struts-default”</li>
<li>namespace：指定名称空间，也就是访问此包下的Action需要访问的路径</li>
<li>abstract：将包声明为抽象类型（即包中不包括action）</li>
</ol>
<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p>###action直接继承actionsupport类，主要实现execute（）方法路径访问先找filter，之后寻找struts配置文件中相应的namespace，如果无，法找到相应的namespace，则返回web.xml执行相应操作，如果找到了，则寻找对应的action，根据执行action后返回的String字符串，在result标签中找到对应的result视图执行</p>
<ol>
<li>name：用于配置Action对象被请求的URL映射</li>
<li>class：指定Action对象的类名</li>
<li>method：设置请求Action对象时，调用Action对象的哪一个方法,通过method指定来实现方法调用会产生大量action实例，浪费资源，所以一般不推荐使用。一般使用动态方法调用DMI</li>
<li>converter：指定Action对象类型转换器的类</li>
</ol>
<h2 id="result"><a href="#result" class="headerlink" title="result"></a>result</h2><h2 id="相关注意事项："><a href="#相关注意事项：" class="headerlink" title="相关注意事项："></a>相关注意事项：</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDBC进行数据库连接操作]]></title>
      <url>https://songjin1994.github.io/2016/02/13/webserve_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="JDBC进行数据库连接操作"><a href="#JDBC进行数据库连接操作" class="headerlink" title="JDBC进行数据库连接操作"></a>JDBC进行数据库连接操作</h1><blockquote>
<p>在page指令中可以使用import导入所需要的java开发包java.sql，进行数据库开发。</p>
</blockquote>
<p>查询代码如下所示</p>
<pre><code>&lt;%@page contentType=&quot;text/html&quot; pageEncoding=&quot;GBK&quot; %&gt;
&lt;%@page import=&quot;java.sql.*&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;jdbc编程测试&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;%!
    public static final String DBDRIVER=&quot;org.gjt.mm.mysql.Driver&quot;;
    public static final String DBURL=&quot;jdbc:mysql://localhost:3306/baron&quot;;
    public static final String DBUSER=&quot;root&quot;;
    public static final String DBPASS=&quot;mysql&quot;;
%&gt;
&lt;%
    Connection conn=null;
    PreparedStatement pstmt=null;
    ResultSet rs=null;
%&gt;
&lt;%
    try {
        Class.forName(DBDRIVER);
        conn=DriverManager.getConnection(DBURL,DBUSER,DBPASS);
        String sql=&quot;SELECT name,age FROM user&quot;;
        pstmt=conn.prepareStatement(sql);
        rs=pstmt.executeQuery();
        while (rs.next()){
            String name=rs.getString(&quot;name&quot;);
            int age=rs.getInt(&quot;age&quot;);

%&gt;
&lt;%=name%&gt;&lt;br&gt;&lt;%=age%&gt;&lt;br&gt;
&lt;%
        }
        rs.close();
        pstmt.close();
        conn.close();

    }catch (Exception e){
        e.printStackTrace();
    }

%&gt;
&lt;%=&quot;结果显示&quot;%&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>]]></content>
    </entry>
    
  
  
</search>
